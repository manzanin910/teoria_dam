- Proyecto 1: Simulación del universo (choque de galaxias en un espacio tridimensional):

-> En el día 1 he decidido informarme un poco sobre los arrays tridimensionales y recordar del pasado el uso del array bidimensional, ciertamente iba a hacerlo en 2D primero para
   empezar con buen pie, pero ya no va a hacer falta porque he aclarado muchas cosas sobre la representación en 3D en la consola.

-> Lo primero que he hecho es inicializar un tablero, esto yo ya lo sabia porque ya tenia experiencia con otro proyecto que hice en javascript parecido. Lo que pasa es que este
   proyecto es mas complejo porque estamos trabajando en tres dimensiones, con el anterior de javascript solo trabajaba con dos dimensiones (y se me hacia dificil xd). Ahora bien,
   ¿porque inicializar un tablero? Esto es porque necesitamos una plantilla con espacios en blanco (o puntos mejor) que cumpla con la cantidad de filas, columnas y profundidad que querramos,
   en este caso es 10x10x10 (rows, cols, depth). Hay que tener en cuenta que para inicializar un tablero en 3D necesitamos usar bucles anidados, es decir, un bucle for que itere
   por 'x', luego crear uno anidado a este que itere por 'y', y después otro más por 'z' (esto es para lograr tener un control de todas las dimensiones y poder añadir ACADA ELEMENTO un espacio
   en blanco (o puntos, por eso el array es de caracteres), para luego poder sustituirlos por las fichas que yo quiera => galaxias con peso aleatorio entre 1 y 5).
   Cabe recalcar que el inicializar el tablero será un método que no retornará nada, esto es así porque lo que hacemos es modificar el parametro que es una referencia al array 3D que hemos 
   creado anteriormente, por tanto no hace falta retonarlo porque se reflejará en el array original.

-> Lo segundo que he hecho es imprimir el tablero, esta parte era bastante jodida al principio porque no sabia como simular tres dimensiones en una consola de dos dimensiones.
   Recordé lo de las rebanadas de pan pero aun así no lo entendía, ¿qué cojones significa eso? hasta que después de investigar me di cuenta de lo que se refería. El objetivo de
   de imprimir el tablero es conseguir imprimir en la consola una vista ENTENDIBLE del escenario de juego, eso significaba que las filas tenían que apilarse creando columnas,
   y eso era fácil, simplemente usé println. ¿Y con z, que haces con eso? Pues utilizamos secciones que actuen como rebanadas de pan, estas secciones muestran la profundidad del
   cubo (esto proporciona una vista posible en 2D, y por tanto, en la consola), cada sección muestra su propio 'x' e 'y', por tanto la iteración de 'z' englobaba tanto a la
   iteración de 'x' como a la de 'y'. Al final, en la última iteración, simplemente imprimimos el escenario completo (x,y,z).

-> En el día 2 decidí seguir con la generación aleatoria de números que simularían las galaxias con un peso determinado. Al principio pensé que iba a ser sencillo, pero conforme me fui dando cuenta
   de ciertas cosas, caí en la cuenta de las posibilidades. Me explico, intenté en printGrid generar los números aleatorios, pero me di cuenta de que si lo hacia de esta manera:
   grid[x][y][z] = ... (random), se generarían números aleatorios en TODAS LAS CASILLAS (obviamente no quería eso, quería limitar el número de galaxias que aparecian, pero que el peso fuese
   aleatorio entre una franja de números de un solo dígito). Pensando me di cuenta del asunto, si quería decidir el número de galaxias que se iban a generar tendría que usar un bucle que parase cuando
   alcanzara el número deseado. Y así lo hice, en un principio pensé en crear un mecanismo para evitar pesos duplicados, ciertamente hay muchas formas de evitar duplicaciones, una de ellas es usar
   un HashMap que almacene los valores como clave y el numero de repeticiones como valor, y otra era usar un conjunto (Set). Los conjuntos son agrupaciones de valores que no pueden estar duplicados,
   e intente usarlo para generar pesos únicos, pero no me acabó convenciendo, quizá en un futuro lo implemento si me apetece, pero en la actualidad no considero que sea una obligación que los valores
   no esten duplicados en el tablero, si veo que da problemas lo cambiaré, pero no creo. En el bucle tuve que crear un randomizador de cada posición y otro para cada peso, y después colocarlo en el grid.

-> En el día 3 no he hecho nada en el código como tal, solo estuve probando y viendo a ver como podía planear los desplazamientos de los números. Hay que tener en cuenta que necesito desplazar un número
   hacia uno que sea mayor y que esté más cerca que los demás. Lo que se me ocurrió fue crear una función que te dijese las coordenadas en el tablero de la celda donde se encontraba el número mayor, pero
   solo se me ocurría un método para hallar el número mayor en las celdas circundantes del número en cuestión. Ya que usaba desplazamientos que iban de -1 a 1 en todas las direcciones (solo 1 unidad).
   BUENAS NOTICIAS, he conseguido hacer una función que me detecte si hay un numero mayor partiendo de cualquier numero, al final es mucho mas facil de lo que pensaba. O sea, yo intentaba conseguirlo por
   desplazamientos, donde sumaba el desplazamiento en x,y,z y examinaba si existia en posiciones circundantes un valor mayor, pero era muy limitante, de normal se usa para examinar celdas circundantes que
   estan a 1 unidad de la celda central, en este caso no rentaba. Era mucho mas facil aprovecharme del tamaño escaso (10x10x10) para examinar todas las celdas posibles en todas las dimensiones partiendo
   desde un numero, simplemente usar bucles anidados y comparar el grid[x][y][z] con el numero en cuestion, en este caso si es mas grande y meterlo en un array de coordenadas o string (para prueba). ¡Solo
   faltan los desplazamientos! Ahora se van facilitando las cosas.

-> En el día 4 he tenido que arreglar la función que hice en el día 3 ya que solo estaba buscando entre todo el tablero un número más grande que el inicial, y no es lo que hay que hacer. Lo ideal es buscar
   el número más cercano al inicial y que sea más grande para después realizar el desplazamiento. El concepto era sencillo, necesitaba calcular la distancia entre dos puntos, el número inicial y los números
   cercanos. Para ello, iba a necesitar hacer un seguimiento de la distancia más pequeña para confirmar que lo sea de verdad y mostrar las coordenadas. Lo comparé con un número límite, puede ser cualquiera que
   sea lo suficientemente grande como para no fastidiar en la comparación, necesitaba que en la primera iteración el número inicial fuese más pequeño para guardarlo en el número límite y en la segunda iteración 
   comprarlo con la siguiente distancia, eso me confirmaría encontrar SI O SI la distancia más pequeña (es complicado explicarlo pero luego en la práctica se ve fácil). Al principio me dió problemas porque no me
   mostraba las coordenadas correctamente, eso era porque no estaba buscando el número más cercano y MÁS GRANDE que el inicial, se me había olvidado la condición de que tenía que ser más grande necesariamente que
   el inicial. ¡Listo! Ahora sí, podemos seguir con las generaciones y desplazamientos (si Dios quiere).

-> Anotación: si, tenia razon, solo identifica el más grande no el más cercano soy gilipollas.

-> Día 5, terrible. Hoy he estado intentando hacer el desplazamiento de los valores sobre el tablero y esta siendo una experiencia confusa. Cuando hice el juego de la vida, los desplazamientos eran según el 
   número de vecinos que hubiera en el area circundante, en ese caso moriría la celula central o viviría, sustituyendo el 0 por el 1 o viceversa. Pero aquí se trata de hacer que el número se mueva con un sentido
   y una dirección. Tenemos como punto de referencia el valor cercano y mayor con la función que hice la última vez, pero necesito entender como desplazar un número sobre un tablero para que vaya reduciendo la
   distancia y llege al valor en cuestión. Está claro que necesito trabajar con desplazamientos y para ello necesito todos los desplazamientos posibles para crear una nueva X, una nueva Y y una nueva Z que
   represente la nueva posición, con los límites claros para que no se salga del tablero. Pero aún esta la incógnita de como cojones creo la lógica siguiente.

-> Día 6, LO HE CONSEGUIDO. Me ha costado llegar a la fórmula para conseguir hacer la función del desplazamiento, si lo analizas bien no era tan complicado. Lo primero que he hecho es seguir la idea de que
   necesito encontrar el desplazamiento que disminuya la distancia entre ambos objetivos. Para ello necesitaba crear un sistema parecido al que usé en la anterior función, necesitaba almacenar la distancia posible
   en cada desplazamiento y compararla con la distancia original que se consigue en la anterior función. También era necesario hacer un seguimiento de la nueva distancia (ya sabes lo que significa eso), para
   que se vaya actualizando y poder seguir comprobando que se cumple. Y ya después, una vez comprobado que ese desplazamiento es válido, se sustituyen los valores nuevos con los antiguos para que se guarde
   esa posición. ¡Falta muy poco! Solo falta hacer la suma cuando esten cerca.
 
