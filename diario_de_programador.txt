- Proyecto 1: Simulación del universo (choque de galaxias en un espacio tridimensional):

-> En el día 1 he decidido informarme un poco sobre los arrays tridimensionales y recordar del pasado el uso del array bidimensional, ciertamente iba a hacerlo en 2D primero para
   empezar con buen pie, pero ya no va a hacer falta porque he aclarado muchas cosas sobre la representación en 3D en la consola.

-> Lo primero que he hecho es inicializar un tablero, esto yo ya lo sabia porque ya tenia experiencia con otro proyecto que hice en javascript parecido. Lo que pasa es que este
   proyecto es mas complejo porque estamos trabajando en tres dimensiones, con el anterior de javascript solo trabajaba con dos dimensiones (y se me hacia dificil xd). Ahora bien,
   ¿porque inicializar un tablero? Esto es porque necesitamos una plantilla con espacios en blanco (o puntos mejor) que cumpla con la cantidad de filas, columnas y profundidad que querramos,
   en este caso es 10x10x10 (rows, cols, depth). Hay que tener en cuenta que para inicializar un tablero en 3D necesitamos usar bucles anidados, es decir, un bucle for que itere
   por 'x', luego crear uno anidado a este que itere por 'y', y después otro más por 'z' (esto es para lograr tener un control de todas las dimensiones y poder añadir ACADA ELEMENTO un espacio
   en blanco (o puntos, por eso el array es de caracteres), para luego poder sustituirlos por las fichas que yo quiera => galaxias con peso aleatorio entre 1 y 5).
   Cabe recalcar que el inicializar el tablero será un método que no retornará nada, esto es así porque lo que hacemos es modificar el parametro que es una referencia al array 3D que hemos 
   creado anteriormente, por tanto no hace falta retonarlo porque se reflejará en el array original.

-> Lo segundo que he hecho es imprimir el tablero, esta parte era bastante jodida al principio porque no sabia como simular tres dimensiones en una consola de dos dimensiones.
   Recordé lo de las rebanadas de pan pero aun así no lo entendía, ¿qué cojones significa eso? hasta que después de investigar me di cuenta de lo que se refería. El objetivo de
   de imprimir el tablero es conseguir imprimir en la consola una vista ENTENDIBLE del escenario de juego, eso significaba que las filas tenían que apilarse creando columnas,
   y eso era fácil, simplemente usé println. ¿Y con z, que haces con eso? Pues utilizamos secciones que actuen como rebanadas de pan, estas secciones muestran la profundidad del
   cubo (esto proporciona una vista posible en 2D, y por tanto, en la consola), cada sección muestra su propio 'x' e 'y', por tanto la iteración de 'z' englobaba tanto a la
   iteración de 'x' como a la de 'y'. Al final, en la última iteración, simplemente imprimimos el escenario completo (x,y,z).

-> En el día 2 decidí seguir con la generación aleatoria de números que simularían las galaxias con un peso determinado. Al principio pensé que iba a ser sencillo, pero conforme me fui dando cuenta
   de ciertas cosas, caí en la cuenta de las posibilidades. Me explico, intenté en printGrid generar los números aleatorios, pero me di cuenta de que si lo hacia de esta manera:
   grid[x][y][z] = ... (random), se generarían números aleatorios en TODAS LAS CASILLAS (obviamente no quería eso, quería limitar el número de galaxias que aparecian, pero que el peso fuese
   aleatorio entre una franja de números de un solo dígito). Pensando me di cuenta del asunto, si quería decidir el número de galaxias que se iban a generar tendría que usar un bucle que parase cuando
   alcanzara el número deseado. Y así lo hice, en un principio pensé en crear un mecanismo para evitar pesos duplicados, ciertamente hay muchas formas de evitar duplicaciones, una de ellas es usar
   un HashMap que almacene los valores como clave y el numero de repeticiones como valor, y otra era usar un conjunto (Set). Los conjuntos son agrupaciones de valores que no pueden estar duplicados,
   e intente usarlo para generar pesos únicos, pero no me acabó convenciendo, quizá en un futuro lo implemento si me apetece, pero en la actualidad no considero que sea una obligación que los valores
   no esten duplicados en el tablero, si veo que da problemas lo cambiaré, pero no creo. En el bucle tuve que crear un randomizador de cada posición y otro para cada peso, y después colocarlo en el grid.
   
